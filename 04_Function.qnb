[{"kind":1,"language":"markdown","value":"### Function\n\n-   functions are first-class functions, which are treated like ordinary variables\n-   parameter number is limited by 8\n-   implicit parameters are `x`,`y`,`z`\n-   semicolon to separate statements in function\n-   `rank` .matrix.createIdentity a function means the number .matrix.createIdentity parameters, the minimum rank is 1. .matrix.createIdentity provide more parameters than the rank .matrix.createIdentity the function, throw error `rank`.\n-   `value` a function to get details about function, include which file define the function\n-   identity function `(::)`\n-   no [closure](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures) feature like javascript or golang\n-   return of last statement of the function is the default return\n-   `:` in a function is similar to `return` keyword in other programming language\n-   `'` throws error\n","outputs":[]},{"kind":2,"language":"q","value":"/ define a function\n.matrix.createIdentity:{(x,x)#1,x#0};\n.matrix.createIdentity 9","outputs":[]},{"kind":2,"language":"q","value":"type .matrix.createIdentity","outputs":[]},{"kind":2,"language":"q","value":".matrix.createIdentity[4]","outputs":[]},{"kind":2,"language":"q","value":".matrix.createIdentity@5","outputs":[]},{"kind":2,"language":"q","value":"/ a function without parameter, the first parameter is ignored\n.time.now.getNanoseconds:{.z.P mod 1000000000};\n.time.now.getNanoseconds[]","outputs":[]},{"kind":2,"language":"q","value":"/ as the minimum rank(number of parameter) is 1, this won't throw 'rank error\n.time.now.getNanoseconds[0]","outputs":[]},{"kind":2,"language":"q","value":".time.now.getNanoseconds[`]","outputs":[]},{"kind":2,"language":"q","value":".time.now.getNanoseconds[()]","outputs":[]},{"kind":2,"language":"q","value":".time.now.getNanoseconds[.matrix.createIdentity]","outputs":[]},{"kind":2,"language":"q","value":"/ ERROR, too many parameters\n{[param1;param2;param3;param4;param5;param6;param7;param8;param9]}","outputs":[]},{"kind":2,"language":"q","value":"/ missed a semicolon\n{\n    x:x+y\n    :x\n }[1;9]","outputs":[]},{"kind":2,"language":"q","value":"{\n    x:x+y;\n    :x\n }[1;9]","outputs":[]},{"kind":2,"language":"q","value":"/ ERROR, provide too many parameters\nsum[9;9]","outputs":[]},{"kind":2,"language":"q","value":"/ make sure to start a q process in this repo folder\nsystem\"l 04_Function.q\"","outputs":[]},{"kind":2,"language":"q","value":"/ value a function to get details about the function\nvalue .function.empty","outputs":[]},{"kind":2,"language":"q","value":"/ get source file path that function is defined\nfirst -3#value[.function.empty]","outputs":[]},{"kind":2,"language":"q","value":"/ return parameter itself\n(::) 9","outputs":[]},{"kind":2,"language":"q","value":".time.getPrevWeekDay:{[date]date - 1^(1 2 3)@date mod 7};\n{\n    prevWeekDay: .time.getPrevWeekDay .z.D;\n    / ERROR, prevWeekDay is not accessible from inner function as q has no closure feature\n    { string[prevWeekDay]except \".\"}[]\n }[]","outputs":[]},{"kind":2,"language":"q","value":".time.getPrevWeekDay:{[date]date - 1^(1 2 3)@date mod 7};\n{\n    prevWeekDay: .time.getPrevWeekDay .z.D;\n    / pass in prevWeekDay as a parameter\n    {[prevWeekDay] string[prevWeekDay]except \".\"}[prevWeekDay]\n }[]","outputs":[]},{"kind":2,"language":"q","value":"{[filepath]\n    / throw error\n    if[0h=type key filepath;'\"NoSuchFile\"];\n    read0 filepath\n }[`:dummy]","outputs":[]},{"kind":2,"language":"q","value":"{[filepath]\n    if[0h=type key filepath;'\"No such file or directory\"];\n    read0 filepath\n }[`:04_Function.q]","outputs":[]},{"kind":2,"language":"q","value":"{[filepath]\n    if[0h=type key filepath;'\"No such file or directory\"];\n    read0 filepath;\n    / last semicolon(;) adds a null statement, hence return null\n }[`:04_Function.q]","outputs":[]},{"kind":1,"language":"markdown","value":"#### Projection\n\nOnly partial parameters are provided, return a projection function\n\n-   normal projection\n-   operator projection\n-   `@` projection, as functions are variables, `@` force the function to \n","outputs":[]},{"kind":2,"language":"q","value":"/ provide 2nd parameter 7\n.math.modBy7: mod[;7];\n.math.modBy7[100]","outputs":[]},{"kind":2,"language":"q","value":"type .math.modBy7","outputs":[]},{"kind":2,"language":"q","value":"/ operator projection, 2nd parameter is provided\n.ric.joinTSEStr:,[;\".T\"];\n.ric.joinTSEStr \"7203\"","outputs":[]},{"kind":2,"language":"q","value":"/ operator projection, 1st parameter is provided\n.math.ifPositive: <[0];\n.math.ifPositive -1 3 -5 7 -9","outputs":[]},{"kind":2,"language":"q","value":"/ a more complicate projection, number => RIC\n.ric.appendTSESym:sv[`],[;`T]`$string@;\n.ric.appendTSESym 7023","outputs":[]},{"kind":1,"language":"markdown","value":"#### Iterator\n\n-   `each` - apply a rank 1 function to each item of a list\n-   `'` - apply a function of any rank to each item of **lists**, rank should be equal to number of lists\n-   `/:` - apply a rank 2 function to each item of the right list\n-   `\\:` - apply a rank 2 function to each item of the left list\n-   `prior` - apply a rank 2 function to each item of the list and its previous item on the list\n","outputs":[]},{"kind":2,"language":"q","value":"sv[`] each (`7203`T;`6803`T)","outputs":[]},{"kind":2,"language":"q","value":"$'[\"DS\";(\"2022-10-15\";\"8306.T\")]","outputs":[]},{"kind":2,"language":"q","value":"\"DS\"$'(\"2022-10-15\";\"8306.T\")","outputs":[]},{"kind":2,"language":"q","value":"/ participation weighted price, apply function to each item of 4 lists\n.tca.calcPWP:{[orderQty;tradeQty;tradePrice;rate]\n    (deltas (orderQty%rate) & sums tradeQty) wavg tradePrice\n };\n.tca.calcPWP'[\n    25 45;\n    (100 100 100 100 100;100 200 300 400);\n    (101 102 103 104 105;102 103 104 105);\n    .1 .2\n ]","outputs":[]},{"kind":2,"language":"q","value":"` sv/: (`7203`T;`6803`T)","outputs":[]},{"kind":2,"language":"q","value":"/ test RIC for JP markets\nany (\"7203.T\";\"7203.F\";\"TM.N\";\"7203.SBI\") like/: (\"*.T\";\"*.SBI\")","outputs":[]},{"kind":2,"language":"q","value":"(\"7203\";\"8306\"),\\:\".T\"","outputs":[]},{"kind":2,"language":"q","value":"/ test if current item < its previous item, for the first item 101 < 0N\nprior[<]101 103 101 107 109 104","outputs":[]},{"kind":1,"language":"markdown","value":"#### @ vs .\n\n-   `@` - apply a rank 1 function to a parameter\n-   `.` - apply a function of any rank to a list of parameters, similar to spread operation(`*`) in Python\n","outputs":[]},{"kind":2,"language":"q","value":".tca.getPerf:{[bmkPrice;execPrice;side](bmkPrice-execPrice)%bmkPrice*$[side=`B;1;-1]};\n.tca.getPerf[659.2;660]@`S","outputs":[]},{"kind":2,"language":"q","value":"/ the whole list is treated as the first parameter, return a projection\n.tca.getPerf@(659.2;660;`S)","outputs":[]},{"kind":2,"language":"q","value":"/ spread the list of parameter as 1st, 2nd, 3rd parameters\n.tca.getPerf . (659.2;660;`B)","outputs":[]},{"kind":1,"language":"markdown","value":"#### over vs scan\n\n-   `over` or `/` - aggregation, apply a rank 1 function to current item of previous result, only return the final result\n-   `scan` or `\\` - accumulation, apply a rank 1 function to current item of previous result, return all results\n","outputs":[]},{"kind":2,"language":"q","value":"/ sum all percentages\nover[+] 0.1 0.2 0.3 0.4","outputs":[]},{"kind":2,"language":"q","value":"(+/) 0.1 0.2 0.3 0.4","outputs":[]},{"kind":2,"language":"q","value":"trade:`date xasc ([]date:100?.z.D-til 10;qty:100?100*1+til 3;price:659.2+0.1*100?10);\n/ query for last 3 days' data using over/\n/ function/[initValue;list]\n{[data;dt]\n    t: select from trade where date=dt;\n    data,t\n }/[();.z.D-til 3]","outputs":[{"mime":"x-application/q-notebook","value":{"type":"text","data":["date       qty price","--------------------","2022.10.16 300 659.4","2022.10.16 300 659.3","2022.10.16 100 660.1","2022.10.16 200 659.5","2022.10.16 300 659.3","2022.10.16 200 660.1","2022.10.16 100 659.5","2022.10.16 300 659.8","2022.10.15 100 659.5","2022.10.15 300 660  ","2022.10.15 300 659.3","2022.10.15 200 659.6","2022.10.15 300 659.9","2022.10.15 300 659.4","2022.10.15 300 659.2","2022.10.15 300 659.7","2022.10.15 300 659.6","2022.10.15 200 659.3","2022.10.14 200 659.6","2022.10.14 200 659.4","2022.10.14 200 659.7","2022.10.14 100 660.1","2022.10.14 300 659.4","2022.10.14 100 660.1","2022.10.14 100 659.3","2022.10.14 100 659.9","2022.10.14 200 659.3"],"duration":1,"uniqLabel":",localhost-1800-timeout","query":"trade:`date xasc ([]date:100?.z.D-til 10;qty:100?100*1+til 3;price:659.2+0.1*100?10);\n/ query for last 3 days' data using over/\n/ function/[initValue;list]\n{[data;dt]\n    t: select from trade where date=dt;\n    data,t\n }/[();.z.D-til 3]"}},{"mime":"text/x-json","value":{"type":"text","data":["date       qty price","--------------------","2022.10.16 300 659.4","2022.10.16 300 659.3","2022.10.16 100 660.1","2022.10.16 200 659.5","2022.10.16 300 659.3","2022.10.16 200 660.1","2022.10.16 100 659.5","2022.10.16 300 659.8","2022.10.15 100 659.5","2022.10.15 300 660  ","2022.10.15 300 659.3","2022.10.15 200 659.6","2022.10.15 300 659.9","2022.10.15 300 659.4","2022.10.15 300 659.2","2022.10.15 300 659.7","2022.10.15 300 659.6","2022.10.15 200 659.3","2022.10.14 200 659.6","2022.10.14 200 659.4","2022.10.14 200 659.7","2022.10.14 100 660.1","2022.10.14 300 659.4","2022.10.14 100 660.1","2022.10.14 100 659.3","2022.10.14 100 659.9","2022.10.14 200 659.3"],"duration":1,"uniqLabel":",localhost-1800-timeout","query":"trade:`date xasc ([]date:100?.z.D-til 10;qty:100?100*1+til 3;price:659.2+0.1*100?10);\n/ query for last 3 days' data using over/\n/ function/[initValue;list]\n{[data;dt]\n    t: select from trade where date=dt;\n    data,t\n }/[();.z.D-til 3]"}}]},{"kind":2,"language":"q","value":"/ cumulative percentage\nscan[+] 0.1 0.2 0.3 0.4","outputs":[]},{"kind":2,"language":"q","value":"(+\\) 0.1 0.2 0.3 0.4","outputs":[]},{"kind":1,"language":"markdown","value":"#### eval VS value\n\n-   `parse` - parse a statement to a abstract tree\n-   `eval` - evaluate nested lists, but `value` cannot.\n","outputs":[]},{"kind":2,"language":"q","value":"parse \"date=.z.D\"","outputs":[]},{"kind":2,"language":"q","value":"date:.z.d - til 10;\nvalue (=;date;.z.D)","outputs":[]},{"kind":2,"language":"q","value":"eval (=;date;`.z.D)","outputs":[]},{"kind":2,"language":"q","value":"/ able to evaluate symbol\neval (=;`date;`.z.D)","outputs":[]},{"kind":2,"language":"q","value":"parse \"sum abs num\"","outputs":[]},{"kind":2,"language":"q","value":"num: 5-til 10;\n/ value cannot evaluate nested list (abs;num)\nvalue (sum;(abs;num))","outputs":[]},{"kind":2,"language":"q","value":"eval (sum;(abs;num))","outputs":[]},{"kind":2,"language":"q","value":"eval (sum;(abs;`num))","outputs":[]}]