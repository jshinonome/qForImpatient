[{"kind":1,"language":"markdown","value":"### Order of Evaluation\n\n**q interpreter statement from right to left**, add bracket if you need to prioritize the order of evaluation\n","outputs":[]},{"kind":2,"language":"q","value":"9 * 9 + 9","outputs":[{"mime":"x-application/q-notebook","value":{"type":"text","data":["162"],"duration":0,"uniqLabel":",localhost-1800-timeout","query":"9 * 9 + 9"}},{"mime":"text/x-json","value":{"type":"text","data":["162"],"duration":0,"uniqLabel":",localhost-1800-timeout","query":"9 * 9 + 9"}}]},{"kind":1,"language":"markdown","value":"### Statement\n\n`;` - statement separator, **BEST PRACTICE** to put a semicolon at the end of a statement\n","outputs":[]},{"kind":2,"language":"q","value":"/ one statement\n9 + 9 9","outputs":[{"mime":"x-application/q-notebook","value":{"type":"text","data":["18 18"],"duration":1,"uniqLabel":",localhost-1800-timeout","query":"/ one statement\n9 + 9 9"}},{"mime":"text/x-json","value":{"type":"text","data":["18 18"],"duration":1,"uniqLabel":",localhost-1800-timeout","query":"/ one statement\n9 + 9 9"}}]},{"kind":2,"language":"q","value":"/ two statements in a line, first statement output is ignored\n9 + 9; 9","outputs":[{"mime":"x-application/q-notebook","value":{"type":"text","data":["9"],"duration":1,"uniqLabel":",localhost-1800-timeout","query":"/ two statements in a line, first statement output is ignored\n9 + 9; 9"}},{"mime":"text/x-json","value":{"type":"text","data":["9"],"duration":1,"uniqLabel":",localhost-1800-timeout","query":"/ two statements in a line, first statement output is ignored\n9 + 9; 9"}}]},{"kind":1,"language":"markdown","value":"### Comments","outputs":[]},{"kind":2,"language":"q","value":"/ start line comment\nshow 18;\n\n/\n  block of comment, NOT RECOMMENDED\n\\\n\nshow 99; / inline comment, need a space before \"/\"\n\n\\\nend of file comment, NOT RECOMMENDED","outputs":[]},{"kind":1,"language":"markdown","value":"### Declaring Variables\n\n#### Name Convention\n\nAs `_` underscore is an operator in q, it is recommended to use **Camel Case** for identifiers\n\n-   identifier: `variable`, e.g. `pi`, `isWeekend`\n-   global identifier: `.namespace.variable`, e.g. `.math.pi`, `.http.createHeader`\n\n> constant identifier starts with a upper letter, e.g. `PercentageRange`\n\n#### Reserved Identifiers\n\nNo need to remember, as vscode-q highlights all reserved identifiers\n","outputs":[]},{"kind":2,"language":"q","value":"/ ERROR, avg is a reserved identifier\nmmu: 9;\n\n/ ERROR, csv is a reserved identifier \n{[csv]\n    read0 csv;\n }","outputs":[]},{"kind":1,"language":"markdown","value":"#### Assignment\n\n-   `:` - local or global assign function, traceable by *vscode-q*\n-   `set` - global assign function, not traceable by *vscode-q*\n-   `::` - global assign function (**NOT RECOMMENDED**)","outputs":[]},{"kind":2,"language":"q","value":"/ root namespace, outside function scope\n/ identifier => global variable\npi: 3.1415;\n/ global identifier => global variable\n.math.pi: 3.1415;\n\n{[num] / num, local parameter, limit to function scope\n    / function scope\n    / identifier => local variables, limit to function scope\n    e: 2.7182;\n    / global identifier => global variable\n    .math.e: 2.7182;\n    \n    / [NOT RECOMMENDED] identifier => local variable, limit to function scope\n    beta:: 0.2801;\n\n    {\n        / inner function scope\n        / as local variables has no hoisting behavior, cannot access local variable outside\n        e * pi / [ERROR] e is not accessible\n        num * pi / [ERROR] num is not accessible\n    }\n\n    / identifier as a symbol => global variables, cause side effect\n    `beta set 0.2801;\n    / global identifier as a symbol => global variables\n    `.math.beta set 0.2081;\n };\n","outputs":[]},{"kind":1,"language":"markdown","value":"### Control Statement\n\n- `if` - conditional statement, execute all statements if condition return true(1b)\n- `exit` - exit q process with a code number, usually return 0 for normal ends\n","outputs":[]},{"kind":2,"language":"q","value":"/ if[condition; statement1; statement2; ...]\nif[1b;\n    .circle.radius: 9;\n    .circle.area: .circle.radius*.circle.radius*3.1415];\n.circle.area","outputs":[{"mime":"x-application/q-notebook","value":{"type":"text","data":["254.4615"],"duration":0,"uniqLabel":",localhost-1800-timeout","query":"if[1b;\n    .circle.radius: 9;\n    .circle.area: .circle.radius*.circle.radius*3.1415];\n.circle.area"}},{"mime":"text/x-json","value":{"type":"text","data":["254.4615"],"duration":0,"uniqLabel":",localhost-1800-timeout","query":"if[1b;\n    .circle.radius: 9;\n    .circle.area: .circle.radius*.circle.radius*3.1415];\n.circle.area"}}]},{"kind":2,"language":"q","value":"/ comment out here, as this will quit q process remotely\n/ exit[0]","outputs":[]},{"kind":1,"language":"markdown","value":"### Exception Handling\n\nQueries from vscode-q to q(version >= 3.5) is trapped, and print a back trace if error occurs\n\n#### Debug\n\n- `.Q.sbt[backtraceObject]` - print backtrace object as a string\n- `.Q.trp[function; arguments; {[error;backtraceObject]]` - trap error and print backtrace object","outputs":[]},{"kind":2,"language":"q","value":"/ `a is a symbol, refer to 02_Variables, this statement will return error msg as a string\n.Q.trp[{x+1};`a;\n    {[error;backtraceObject]\n        2@\"error: \",error,\"\\nbacktrace:\\n\",.Q.sbt backtraceObject;error\n    }];","outputs":[{"mime":"x-application/q-notebook","value":{"type":"text","data":["\"type\""],"duration":2,"uniqLabel":",localhost-1800-timeout","query":"/ `a is a symbol, refer to 02_Variables, this statement will return error msg as a string\n.Q.trp[{x+1};`a;\n    {[error;backtraceObject]\n        2@\"error: \",error,\"\\nbacktrace:\\n\",.Q.sbt backtraceObject;error\n    }]"}},{"mime":"text/x-json","value":{"type":"text","data":["\"type\""],"duration":2,"uniqLabel":",localhost-1800-timeout","query":"/ `a is a symbol, refer to 02_Variables, this statement will return error msg as a string\n.Q.trp[{x+1};`a;\n    {[error;backtraceObject]\n        2@\"error: \",error,\"\\nbacktrace:\\n\",.Q.sbt backtraceObject;error\n    }]"}}]},{"kind":2,"language":"q","value":"/ as vscode-q already trapped the error, no need to trap the statement again\n{x+1}[`a]","outputs":[{"mime":"x-application/q-notebook","value":{"type":"error","data":["ERROR","type","  [4]  {x+1}","         ^","  [3]  / as vscode-q already trapped the error, no need to trap the statement again","{x+1}[`a]","^",""],"duration":2,"uniqLabel":",localhost-1800-timeout","query":"/ as vscode-q already trapped the error, no need to trap the statement again\n{x+1}[`a]"}},{"mime":"text/x-json","value":{"type":"error","data":["ERROR","type","  [4]  {x+1}","         ^","  [3]  / as vscode-q already trapped the error, no need to trap the statement again","{x+1}[`a]","^",""],"duration":2,"uniqLabel":",localhost-1800-timeout","query":"/ as vscode-q already trapped the error, no need to trap the statement again\n{x+1}[`a]"}}]}]