[
  {
    "kind": 1,
    "language": "markdown",
    "value": "### Basic Operator\n\nDifferent from other programming languages\n\n-   `=` - equal, `==` in python\n-   `<>` - not equal, `!=` in python\n-   `%` - divide, `/` in python\n-   `|` - or, max\n-   `&` - and, min\n",
    "outputs": []
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "##### Atom VS Atom",
    "outputs": []
  },
  {
    "kind": 2,
    "language": "q",
    "value": "`a = `a",
    "outputs": []
  },
  {
    "kind": 2,
    "language": "q",
    "value": "1 = 9",
    "outputs": []
  },
  {
    "kind": 2,
    "language": "q",
    "value": "`a <> `a",
    "outputs": []
  },
  {
    "kind": 2,
    "language": "q",
    "value": "99 % 9",
    "outputs": []
  },
  {
    "kind": 2,
    "language": "q",
    "value": "99 | 9",
    "outputs": []
  },
  {
    "kind": 2,
    "language": "q",
    "value": "99 & 9",
    "outputs": []
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "#### Atom VS List",
    "outputs": []
  },
  {
    "kind": 2,
    "language": "q",
    "value": "`a=`a`b`c",
    "outputs": []
  },
  {
    "kind": 2,
    "language": "q",
    "value": "3=til 9",
    "outputs": []
  },
  {
    "kind": 2,
    "language": "q",
    "value": "`a<>`a`b`c",
    "outputs": []
  },
  {
    "kind": 2,
    "language": "q",
    "value": "3<>til 9",
    "outputs": []
  },
  {
    "kind": 2,
    "language": "q",
    "value": "99 % 1 + til 9",
    "outputs": []
  },
  {
    "kind": 2,
    "language": "q",
    "value": "99 | 33 * til 9",
    "outputs": []
  },
  {
    "kind": 2,
    "language": "q",
    "value": "99 & 33 * til 9",
    "outputs": []
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "#### List VS List\n\nLength must be the same on both side\n",
    "outputs": []
  },
  {
    "kind": 2,
    "language": "q",
    "value": "`a`b`c=`a`d`e",
    "outputs": []
  },
  {
    "kind": 2,
    "language": "q",
    "value": "1 2 3=1 5 9",
    "outputs": []
  },
  {
    "kind": 2,
    "language": "q",
    "value": "`a`b`c<>`a`d`e",
    "outputs": []
  },
  {
    "kind": 2,
    "language": "q",
    "value": "1 2 3<>1 5 9",
    "outputs": []
  },
  {
    "kind": 2,
    "language": "q",
    "value": "99 93 87 % 3 2 1",
    "outputs": []
  },
  {
    "kind": 2,
    "language": "q",
    "value": "99 93 87 | 87 93 99",
    "outputs": []
  },
  {
    "kind": 2,
    "language": "q",
    "value": "99 93 87 & 87 93 99",
    "outputs": []
  },
  {
    "kind": 2,
    "language": "q",
    "value": "/ ERROR, lengths are not matched\n99 87 & 87 93 99",
    "outputs": []
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "### Advanced Operator\n\nUsually those operator can perform multiple operations depends on operands and the number of operands. Only list frequently used operations here.\n\n-   `$` - conditional operator, similar to `condition?statementIfTrue:statementIfFalse` in javascript\n-   `?` - vector conditional. By the way, this operation has 8 kinds of operations\n",
    "outputs": []
  },
  {
    "kind": 2,
    "language": "q",
    "value": "$[1b;9;99]",
    "outputs": []
  },
  {
    "kind": 2,
    "language": "q",
    "value": "$[0b;9;1b;99;999]",
    "outputs": []
  },
  {
    "kind": 2,
    "language": "q",
    "value": "?[1100b;til 4;9-til 4]",
    "outputs": []
  },
  {
    "kind": 2,
    "language": "q",
    "value": "/ expand atom automatically\n?[1100b;9;9-til 4]",
    "outputs": []
  }
]